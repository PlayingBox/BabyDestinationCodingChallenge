{"version":3,"sources":["../../../src/routes/user/controller.js"],"names":["controller","hashPassword","password","saltRounds","bcryptjs","hash","registerUser","req","res","body","fullname","email","inputData","Joi","validate","userValidationSchema","registerSchema","error","value","status","HttpStatus","BAD_REQUEST","json","details","message","result","userDbm","getUserByEmail","hashedPassword","createUser","CREATED","INTERNAL_SERVER_ERROR","loginUser","module","exports"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,aAAa,EAAnB;;AAEA,IAAMC;AAAA,sFAAe,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,sBADa,GACA,EADA;AAAA;AAAA,mBAENC,mBAASC,IAAT,CAAcH,QAAd,EAAwBC,UAAxB,CAFM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKAH,WAAWM,YAAX;AAAA,uFAA0B,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACcD,IAAIE,IADlB,EAChBC,QADgB,aAChBA,QADgB,EACNC,KADM,aACNA,KADM,EACCT,QADD,aACCA,QADD;AAElBU,qBAFkB,GAEN,EAAEF,kBAAF,EAAYC,YAAZ,EAAmBT,kBAAnB,EAFM;AAAA,4BAGCW,cAAIC,QAAJ,CACvBF,SADuB,EAEvBG,yCAAqBC,cAFE,CAHD,EAGhBC,KAHgB,iBAGhBA,KAHgB,EAGTC,KAHS,iBAGTA,KAHS;;AAAA,iBAQrBD,KARqB;AAAA;AAAA;AAAA;;AAAA,8CASfT,IACJW,MADI,CACGC,0BAAWC,WADd,EAEJC,IAFI,CAEC,EAAE,SAASL,MAAMM,OAAN,CAAc,CAAd,EAAiBC,OAA5B,EAFD,CATe;;AAAA;AAAA;AAelBC,kBAfkB,GAeT,EAfS;AAAA;AAAA,mBAiBPC,6BAAQC,cAAR,CAAuBhB,KAAvB,CAjBO;;AAAA;AAiBtBc,kBAjBsB;;AAAA,kBAmBnBA,UAAUd,KAnBS;AAAA;AAAA;AAAA;;AAAA,8CAoBbH,IACJW,MADI,CACGC,0BAAWC,WADd,EAEJC,IAFI,CAEC,EAAE,SAAS,0BAAX,EAFD,CApBa;;AAAA;AAAA;AAAA,mBAyBOrB,aAAaC,QAAb,CAzBP;;AAAA;AAyBhB0B,0BAzBgB;AAAA;AAAA,mBA2BPF,6BAAQG,UAAR,CAAmBnB,QAAnB,EAA6BC,KAA7B,EAAoCV,YAApC,CA3BO;;AAAA;AA2BtBwB,kBA3BsB;AAAA,8CA6BfjB,IACJW,MADI,CACGC,0BAAWU,OADd,EAEJR,IAFI,CAEC,EAAE,QAAQ,EAAE,UAAUG,MAAZ,EAAV,EAFD,CA7Be;;AAAA;AAAA;AAAA;AAAA,8CAmCfjB,IACJW,MADI,CACGC,0BAAWW,qBADd,EAEJT,IAFI,CAEC,EAAE,qBAAF,EAFD,CAnCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAyCAtB,WAAWgC,SAAX,GAAuB,UAACzB,GAAD,EAAMC,GAAN,EAAc,CAEpC,CAFD;;AAIAyB,OAAOC,OAAP,GAAiBlC,UAAjB","file":"controller.js","sourcesContent":["import Joi from 'joi';\nimport HttpStatus from 'http-status-codes';\nimport bcryptjs from 'bcryptjs';\nimport { userValidationSchema } from '../../schema_validations';\nimport { userDbm } from '../../db/dbManipulationLayer';\n\nconst controller = {};\n\nconst hashPassword = async (password) => {\n  const saltRounds = 10;\n  return await bcryptjs.hash(password, saltRounds);\n}\n\ncontroller.registerUser = async (req, res) => {\n  const { fullname, email, password } = req.body;\n  const inputData = { fullname, email, password };\n  const { error, value } = Joi.validate(\n    inputData,\n    userValidationSchema.registerSchema\n  );\n\n  if(error) {\n    return res\n      .status(HttpStatus.BAD_REQUEST)\n      .json({ 'Error': error.details[0].message });\n  }\n\n  try {\n    let result = '';\n\n    result = await userDbm.getUserByEmail(email);\n\n    if(result == email) {\n      return res\n        .status(HttpStatus.BAD_REQUEST)\n        .json({ 'Error': 'Email already registered' });\n    }\n\n    const hashedPassword = await hashPassword(password);\n\n    result = await userDbm.createUser(fullname, email, hashPassword);\n\n    return res\n      .status(HttpStatus.CREATED)\n      .json({ 'data': { 'userId': result } });\n  }\n\n  catch (error) {\n    return res\n      .status(HttpStatus.INTERNAL_SERVER_ERROR)\n      .json({ 'Error': error });\n  }\n}\n\ncontroller.loginUser = (req, res) => {\n\n}\n\nmodule.exports = controller;"]}