{"version":3,"sources":["../../../src/db/dbManipulationLayer/user.js"],"names":["dmlFunctions","getUserByEmail","email","pool","connect","client","query","result","rows","createUser","fullname","password","id","module","exports"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,eAAe,EAArB;;AAEAA,aAAaC,cAAb;AAAA,sFAA8B,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACxBA,KADwB;AAAA;AAAA;AAAA;;AAAA,kBAEpB,EAAE,SAAS,iBAAX,EAFoB;;AAAA;AAAA;AAAA;AAAA,mBAMLC,aAAKC,OAAL,EANK;;AAAA;AAMpBC,kBANoB;AAAA;AAAA,mBAOLA,OAAOC,KAAP,CACnB,0CADmB,EAEnB,CAACJ,KAAD,CAFmB,CAPK;;AAAA;AAOpBK,kBAPoB;AAAA,6CAYnBA,OAAOC,IAAP,CAAY,CAAZ,EAAeN,KAZI;;AAAA;AAAA;AAAA;AAAA,kBAepB,EAAE,oBAAF,EAfoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAmBAF,aAAaS,UAAb;AAAA,uFAA0B,kBAAOC,QAAP,EAAiBR,KAAjB,EAAwBS,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACpBD,QADoB;AAAA;AAAA;AAAA;;AAAA,kBAEhB,EAAE,SAAS,oBAAX,EAFgB;;AAAA;AAAA,gBAGbR,KAHa;AAAA;AAAA;AAAA;;AAAA,kBAIhB,EAAE,SAAS,iBAAX,EAJgB;;AAAA;AAAA,gBAKbS,QALa;AAAA;AAAA;AAAA;;AAAA,kBAMhB,EAAE,SAAS,iBAAX,EANgB;;AAAA;AAAA;AAAA;AAAA,mBAUDR,aAAKC,OAAL,EAVC;;AAAA;AAUhBC,kBAVgB;AAAA;AAAA,mBAWDA,OAAOC,KAAP,CAClB,iDACC,iCAFiB,EAGnB,CAACI,QAAD,EAAWR,KAAX,EAAkBS,QAAlB,CAHmB,CAXC;;AAAA;AAWhBJ,kBAXgB;AAAA,8CAiBfA,OAAOC,IAAP,CAAY,CAAZ,EAAeI,EAjBA;;AAAA;AAAA;AAAA;AAAA,kBAoBhB,EAAE,qBAAF,EApBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAwBAC,OAAOC,OAAP,GAAiBd,YAAjB","file":"user.js","sourcesContent":["import pool from '../../db';\n\nconst dmlFunctions = {};\n\ndmlFunctions.getUserByEmail = async (email) => {\n  if(!email) {\n    throw { 'Error': 'email not found'};\n  }\n\n  try {\n    const client = await pool.connect();\n    const result = await client.query(\n      'SELECT email FROM users WHERE email = $1',\n      [email]\n    );\n\n    return result.rows[0].email;\n  }\n  catch (error) {\n    throw { 'Error': error };\n  }\n}\n\ndmlFunctions.createUser = async (fullname, email, password) => {\n  if(!fullname) {\n    throw { 'Error': 'fullname not found'};\n  } else if(!email) {\n    throw { 'Error': 'email not found'};\n  } else if(!password) {\n    throw { 'Error': 'email not found'};\n  }\n\n  try {\n    const client = await pool.connect();\n    const result = await client.query(\n      ('INSERT INTO users(fullname, email, password)' +\n        'VALUES($1, $2, $3) RETURNING id'),\n      [fullname, email, password]\n    );\n\n    return result.rows[0].id;\n  }\n  catch (error) {\n    throw { 'Error': error };\n  }\n}\n\nmodule.exports = dmlFunctions;"]}